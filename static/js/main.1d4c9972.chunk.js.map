{"version":3,"sources":["utils/index.tsx","api/index.tsx","config/index.tsx","contexts/todo.context.tsx","assets/icons/edit.svg","assets/icons/trash.svg","assets/icons/save.svg","assets/icons/cancel.svg","components/Todos/Todo/todo.tsx","components/UI/Loader/loader.tsx","assets/icons/add.svg","components/UI/AddIcon/addIcon.tsx","components/Todos/todos.tsx","assets/logo/logo.svg","components/Header/header.tsx","components/UI/Input/input.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["generateTodoObject","task","id","uuidv4","date","Date","status","action","color","priority","fetchChuckNorris","a","axios","get","then","res","catch","err","TodoContext","createContainer","useState","loading","setLoading","todos","setTodos","setChuckNorris","apiPromise","forEach","push","Promise","all","apiData","chuckNorrisData","map","chuckNorris","value","data","Error","setTodo","newTodo","deleteTodo","idx","splice","updateTodo","option","updatedTask","Todo","todo","edit","setEdit","updateTask","setUpdateTask","inputRef","useRef","useContainer","useEffect","current","focus","setInputHandler","setUpdatedTodo","e","key","target","className","style","border","background","type","onClick","setTodoStatus","ref","defaultValue","onChange","onKeyPress","renderTask","src","SaveIcon","alt","EditIcon","CancelIcon","TrashIcon","Loader","AddIcon","Add","Todos","length","Header","Logo","Input","newTask","setNewTask","data-testid","placeholder","width","height","onKeyDown","trim","window","alert","addNewTodoHandler","onInputChangeHandler","App","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d4c9972.chunk.js","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\nimport { ITodo } from \"../types/todo.types\";\n\n/**\n * \n * @param task : string\n * \n * @description Method to convert task to specific todo object \n * \n * @returns { ITodo }\n * \n */\n\nexport const generateTodoObject = (task: string): ITodo => {\n    return {\n        id: uuidv4(),\n        task,\n        date: new Date(),\n        status: { action: 'PENDING', color: '#fbff0052' },\n        priority: \"LOW\"\n    }\n}","import axios from 'axios';\n\nimport { apiURL } from '../config'\n\nconst { API_URL } = apiURL;\n\nexport const fetchChuckNorris = async() => {\n    return await axios.get(API_URL)\n        .then(res => res)\n        .catch(err => err);\n}","import { IConfig } from \"../types/todo.types\";\n\nexport const appConfiguration: IConfig = {\n    APP_NAME: 'TODO APP',\n    TODO_STATUS: {\n        PENDING: { action: 'PENDING', color: '#fbff0052' },\n        COMPLETED: { action: 'COMPLETED', color: '#00ff1f52' },\n    }\n}\n\nexport const appMessage = {\n    EMPTY_LIST: 'Add a new task to organize your daily schedule'\n}\n\nexport const apiURL = {\n    API_URL: 'https://api.chucknorris.io/jokes/random?category=dev'\n}","import { useState } from 'react';\nimport { createContainer } from 'unstated-next';\n\nimport { generateTodoObject } from '../utils';\nimport { fetchChuckNorris } from '../api';\nimport { ITodo, TODO_UPDATE_OPTION } from '../types/todo.types';\n\ninterface ITodoContext {\n    loading: boolean;\n    setLoading: React.Dispatch<React.SetStateAction<boolean>>;\n    todos: ITodo[];\n    setTodo: (todo: ITodo) => void;\n    deleteTodo: (idx: number) => void;\n    updateTodo: (idx:number, option: TODO_UPDATE_OPTION, updatedTask:string) => void;\n    setChuckNorris: () => void;\n}\n\nconst useTodoContext = (): ITodoContext => {\n    const [ loading, setLoading ] = useState<boolean>(true);\n    const [ todos, setTodos ] = useState<Array<ITodo>>([]);\n\n    /**\n     * \n     * @param newTodo: { ITodo }\n     * \n     * @description Method to add new todo to the todo collection in memory\n     * \n     */\n\n    const setTodo = (newTodo?: ITodo): void => newTodo && setTodos([...todos, newTodo]);\n\n    /**\n     * \n     * @param idx : index of the todo to be deleted\n     * \n     * @description Method to delete the todo from the collection\n     * \n     */\n\n    const deleteTodo = (idx: number): void => {\n        todos.splice(idx, 1);\n        setTodos([...todos]);\n    }\n\n    /**\n     * \n     * @param idx : index of the todo\n     * @param option : option to perform specific operation ( Task Update, Status Update)\n     * @param updatedTask : updated task to set it to the old todo\n     * \n     * @description Method to update the todo\n     * \n     */\n\n    const updateTodo = (idx:number, option: TODO_UPDATE_OPTION, updatedTask:string) : void => {\n        switch(option) {\n            // Updating the old task with the new task\n            case 'TASK_UPDATE':\n                todos[idx].task = updatedTask;\n                setTodos([...todos]);\n                break;\n\n            // Marking todo as completed or pending\n            case 'STATUS_UPDATE':\n                const { action } = todos[idx].status;\n                if(action === 'COMPLETED') {\n                    todos[idx].status.action = 'PENDING';\n                    todos[idx].status.color = '#fbff0052';\n                    \n                } else {\n                    todos[idx].status.action = 'COMPLETED';\n                    todos[idx].status.color = '#00ff1f52';\n                }\n                setTodos([...todos]);\n        }\n    }\n\n    /**\n     * \n     * @description Method to fetch Chuck jokes from api and set in memory of application\n     * \n     * @returns { Promise<void> }\n     * \n     */\n\n    const setChuckNorris = async(): Promise<void> => {\n        try {\n            const apiPromise: Promise<any>[] = [];            \n\n            // Array used to call CHUCK_NORRIS_API 3 times\n            [1, 2, 3].forEach(() => apiPromise.push(fetchChuckNorris()));\n            const apiData = await Promise.all(apiPromise)\n\n            const chuckNorrisData: Array<ITodo> = apiData.map(chuckNorris => {\n                const { data: { value } } = chuckNorris;\n                return {...generateTodoObject(value)};\n            });\n\n            setLoading(false);\n            setTodos([...todos, ...chuckNorrisData]);\n        } catch(error) {\n            throw new Error(error);\n        }\n    }\n\n    return {\n        loading,\n        setLoading,\n        todos,\n        setTodo,\n        deleteTodo,\n        updateTodo,\n        setChuckNorris\n    };\n}\n\nconst TodoContext = createContainer(useTodoContext);\n\nexport default TodoContext;","export default __webpack_public_path__ + \"static/media/edit.cb3d506e.svg\";","export default __webpack_public_path__ + \"static/media/trash.c49a10b9.svg\";","export default __webpack_public_path__ + \"static/media/save.ff2b3b6a.svg\";","export default __webpack_public_path__ + \"static/media/cancel.6b96b18b.svg\";","import { FC, useEffect, useRef, useState } from \"react\"\nimport { useContainer } from 'unstated-next';\n\nimport { ITodo } from \"../../../types/todo.types\";\nimport TodoContext from '../../../contexts/todo.context';\n\nimport EditIcon from '../../../assets/icons/edit.svg';\nimport TrashIcon from '../../../assets/icons/trash.svg';\nimport SaveIcon from '../../../assets/icons/save.svg';\nimport CancelIcon from '../../../assets/icons/cancel.svg';\n\nimport '../todos.scss';\n\ninterface IProps {\n    idx:number,\n    todo: ITodo\n}\n\nconst Todo: FC<IProps> = ( {idx, todo}: IProps ): JSX.Element => {\n    const [ edit, setEdit ] = useState(false);\n    const [ updateTask, setUpdateTask ] = useState<string>('');\n    \n    const inputRef = useRef<HTMLInputElement>(null);\n    const { id, task, status: { action, color } } = todo;\n            \n    const { updateTodo, deleteTodo } = useContainer(TodoContext);\n\n    useEffect(() => {\n        if(inputRef.current){\n            inputRef.current.focus();\n        }\n    }, [edit]);\n\n    /**\n     * \n     * @description: Method to get an input field to edit todo\n     * \n    */\n\n    const setInputHandler = ():void => setEdit(!edit);\n\n    /**\n     * \n     * @description: Method to update the todo on enter key press\n     * \n    */\n\n\n    const setUpdatedTodo = (idx:number, e: any, option:string):void => {\n        if(option === 'Button' || (option === 'Keyboard' && e.key === 'Enter')) {\n            setInputHandler();\n            if(updateTodo) updateTodo(idx, 'TASK_UPDATE', updateTask);\n        } else {\n            setUpdateTask(e.target.value);\n        }\n    }\n\n    /**\n     *\n     * Method to set status of todo\n     * \n     * @description: Todos can be marked as 'COMPLETED', 'PENDING'\n     *\n    */\n    const setTodoStatus = (idx: number):void => updateTodo(idx, 'STATUS_UPDATE', '');\n\n\n    /**\n     * \n     * @param idx ; index of the todo\n     * @param task : task\n     * \n     * @description: Method conditionally renders the todo\n     * \n     */\n\n    function renderTask(idx: number, task: string) {\n        if(!edit) {\n            if(action === 'COMPLETED') {\n                // Return if todo has been marked completed\n                return (\n                    <p> <del> { task } </del> </p>\n                )\n            }\n            // Return if todo is yet to be completed\n            return ( \n                <p> { task } </p>\n            )\n        }\n\n        // Return if todo needs to be edited\n        return <input\n                    ref={inputRef}\n                    className=\"todo__body--content__edit\" \n                    type=\"text\" defaultValue={task} \n                    onChange={(e) => setUpdatedTodo(idx, e, '')} \n                    onKeyPress={(e) => setUpdatedTodo(idx, e, 'Keyboard')}/>\n    }\n\n    /**\n     * \n     *@description: Return the rendering todo\n     * \n     */\n\n    return (\n        <div className=\"todo\" key={id} style={{ border: `2px solid ${color}`, background: `linear-gradient(to left, #fff, ${color})`}}>\n            <div className=\"todo__body\">\n                <div className=\"todo__body--idx\">\n                    {idx + 1}\n                </div>\n                <div className=\"todo__body--complete\">\n                    <input type=\"checkbox\" onClick={() => setTodoStatus(idx)}/>\n                </div>\n                <div className=\"todo__body--content\">\n                    {renderTask(idx, task)}\n                </div>\n            </div>\n            <div className=\"todo--controlBtn\">\n                <div className=\"todo--controlBtn__editBtn\">\n                    {\n                        !edit ?\n                            <img src={EditIcon} alt='' onClick={setInputHandler}/> :\n                            <img src={SaveIcon} alt='' onClick={(e) => setUpdatedTodo(idx, e, 'Button')}/>\n                    }\n                </div>\n                <div className=\"todo--controlBtn__delBtn\">\n                    {\n                        !edit ? \n                            <img src={TrashIcon} alt='' onClick={() => deleteTodo(idx)}/> :\n                            <img src={CancelIcon} alt='' onClick={setInputHandler}/>\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Todo;","import { FC } from \"react\";\n\nimport './loader.scss';\n\nconst Loader: FC = (): JSX.Element => <div className=\"loader\"> Loading... </div>\n\nexport default Loader;","export default __webpack_public_path__ + \"static/media/add.344d7f90.svg\";","import { FC } from \"react\";\n\nimport { appMessage } from '../../../config/index';\nimport Add from '../../../assets/icons/add.svg';\n\nimport './addIcon.scss';\n\nconst { EMPTY_LIST } = appMessage;\n\nconst AddIcon: FC = (): JSX.Element => {\n    return (\n        <div className=\"Empty\">\n            <div className=\"Empty--container\">\n                <img className=\"Empty--container__icon\" src={Add} alt=\"\"/>\n                <p className=\"Empty--container__content\">{EMPTY_LIST}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default AddIcon;","import { FC, useEffect } from 'react';\nimport { useContainer } from 'unstated-next';\n\nimport Todo from './Todo/todo';\nimport TodoContext from '../../contexts/todo.context';\n\nimport Loader from '../UI/Loader/loader';\nimport AddIcon from '../UI/AddIcon/addIcon';\n\nimport './todos.scss';\n\nconst Todos: FC = (): JSX.Element => {\n    const { loading, todos, setChuckNorris } = useContainer(TodoContext);\n\n    /**\n     * \n     * Fetch Chuch Jokes\n     * \n     * @description: To fetch and set Chuck Jokes in memory\n     * \n     */\n\n    useEffect(() => {\n        const callChuckNorris = () => setChuckNorris();\n        callChuckNorris();\n        // eslint-disable-next-line \n    }, []);\n\n    /**\n     * \n     * @description: Conditional rendering element\n     * \n     * @returns Loader | AddIcon | Todo List\n     * \n     */\n\n    function renderTodo() {\n        // Check if application is in loading\n        if(loading) {\n            return <Loader />\n        } else {\n            // Check if todo is empty\n            if(todos.length === 0) {\n                return <AddIcon />\n            }\n            // Returns the todo lists\n            return todos.map((todo, idx) => <Todo idx={idx} todo={todo} key={todo.id} />)\n        }\n    }\n\n    /**\n     * \n     * @description: Return the todo collection\n     * \n     */\n\n    return (\n        <div className=\"todos\"> {renderTodo()} </div>\n    )\n}\n\nexport default Todos;","export default __webpack_public_path__ + \"static/media/logo.cc6c6425.svg\";","import { FC } from 'react';\n\nimport { appConfiguration } from '../../config';\nimport Logo from '../../assets/logo/logo.svg'\nimport './header.scss';\n\nconst { APP_NAME } = appConfiguration;\n\n/**\n * \n * @description: Returns header of the application\n * \n * @returns: { JSX }\n * \n */\n\nconst Header: FC = (): JSX.Element => <header> <img src={Logo} alt='logo'/>{' '}{APP_NAME} </header>\n\nexport default Header;","import { ChangeEvent, FC, useRef, useState } from 'react';\nimport { useContainer } from 'unstated-next';\n\nimport { generateTodoObject } from '../../../utils';\nimport TodoContext from '../../../contexts/todo.context';\nimport './input.scss';\n\nconst Input: FC = (): JSX.Element => {\n    const inputRef = useRef<HTMLInputElement>(null);\n    const [ newTask, setNewTask ] = useState<string>();\n\n    const { setTodo } = useContainer(TodoContext);\n\n    /**\n     * \n     * @param e : ChangeEvent<HTMLInputElement>\n     * \n     * @description: Take Input box value and update it to the memory\n     * \n     */\n\n    const onInputChangeHandler: Function = (e: ChangeEvent<HTMLInputElement>): void => setNewTask(e.target.value);\n\n    /**\n     * \n     * @param e : KeyboardEvent\n     * \n     * @description: Check for 'Enter' key to update the new task\n     * \n     */\n    \n    const addNewTodoHandler: Function = (e: KeyboardEvent): void => {\n        if(e.key === 'Enter') {\n            if(newTask && newTask.trim()) {\n                const todo = generateTodoObject(newTask);\n                setTodo(todo);\n                setNewTask('');\n            } else {\n                window.alert('Please enter task');\n            }\n            if(inputRef.current) {\n                inputRef.current.value = '';\n            }\n        }\n    }\n\n    return (\n        <div className=\"Input\" data-testid=\"Input--test\">\n            <input\n                ref={inputRef}\n                className=\"Input--box\" \n                data-testid=\"Input--box__test\"\n                placeholder=\"Please enter todo here\" \n                width=\"400\"\n                height=\"100\"\n                onKeyDown={(e) => addNewTodoHandler(e)}\n                onChange={(e) => onInputChangeHandler(e)}\n                defaultValue={\"\"}\n                />\n        </div>\n    )\n}\n\nexport default Input;","import TodoContext from './contexts/todo.context';\nimport Todo from './components/Todos/todos'\nimport Header from './components/Header/header';\nimport Input from './components/UI/Input/input';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <>\n      <TodoContext.Provider>\n        <Header />\n        <Input />\n        <Todo />\n      </TodoContext.Provider>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}